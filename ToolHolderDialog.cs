//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\Store\SANEK\Volume\NXOpen\5_ToolHolder\GUI\ToolHolderDialog.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: Sanek
//              Version: NX 12
//              Date: 04-29-2020  (Format: mm-dd-yyyy)
//              Time: 21:02 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Features;
using NXOpen.Utilities;
using ToolHolder_NS.Model;
using Group = NXOpen.BlockStyler.Group;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class ToolHolderDialog
{
    //class members
    public static Session theSession = null;
    public static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;


    private NXOpen.BlockStyler.Label label0;// Block type: Label
    private NXOpen.BlockStyler.Explorer explorer;// Block type: Explorer
    private NXOpen.BlockStyler.Group explorerNode;// Block type: Group
    private NXOpen.BlockStyler.Label stringLabelTool;// Block type: Label
    private NXOpen.BlockStyler.DoubleBlock doubleToolDiam;// Block type: Integer
    private NXOpen.BlockStyler.Separator separator011;// Block type: Separator
    private NXOpen.BlockStyler.IntegerBlock offsetOfTool;// Block type: Integer
    private NXOpen.BlockStyler.Separator separator02;// Block type: Separator
    private NXOpen.BlockStyler.MultilineString multiline_string01;// Block type: Multiline String
    private NXOpen.BlockStyler.Separator separator03;// Block type: Separator
    private NXOpen.BlockStyler.Label stringLabelHolder;// Block type: Label
    private NXOpen.BlockStyler.Separator separator04;// Block type: Separator
    private NXOpen.BlockStyler.StringBlock stringLibRef1;// Block type: String
    private NXOpen.BlockStyler.Separator separator05;// Block type: Separator
    private NXOpen.BlockStyler.MultilineString multiline_string0;// Block type: Multiline String
    private NXOpen.BlockStyler.Separator separator06;// Block type: Separator
    private NXOpen.BlockStyler.Tree tree_control0;// Block type: Tree Control


    private List <Group> _explorerNodeList = new List<Group>(); 
    private List <Label> _stringLabelToolList = new List<Label>() ;
    private List <DoubleBlock> _doubleToolDiamList = new List<DoubleBlock>();
    private List <Separator> _separator011List = new List<Separator>() ;
    private List <IntegerBlock> _offsetOfToolList = new List<IntegerBlock>();
    private List <Separator> _separator02List = new List<Separator>() ;
    private List <MultilineString> _multiline_string01List = new List<MultilineString>();
    private List <Separator> _separator03List = new List<Separator>();
    private List <Label> _stringLabelHolderList = new List<Label>();
    private List <Separator> _separator04List = new List<Separator>();
    private List <StringBlock> _stringLibRef1List = new List<StringBlock>();
    private List <Separator> _separator05List = new List<Separator>() ;
    private List <MultilineString> _multiline_string0List = new List<MultilineString>() ;
    private List <Separator> _separator06List = new List<Separator>();
    private List <Tree> _tree_control0List = new List<Tree>();


    private DataService _dataService;
    private string _tempoDlxFilePath;
    private thNXTool currentTool;

    private static int cnt = 0;


    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public ToolHolderDialog()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "F:\\Store\\SANEK\\Volume\\NXOpen\\5_ToolHolder\\ToolHolderDialog.dlx";

            //if(!File.Exists(_tempoDlxFilePath))
            //    throw new Exception(String.Format("нет файла даилога ! \nпуть: {0}", _tempoDlxFilePath));
            //theDialog = theUI.CreateDialog(_tempoDlxFilePath);
            //theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            //theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            //theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            //theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
            ////theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
            //theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            //theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            //theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            //theDialog.AddEnableOKButtonHandler(new NXOpen.BlockStyler.BlockDialog.EnableOKButton(enableOKButton_cb));
            //theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }

    public void buildDialog()
    {
        if (!File.Exists(_tempoDlxFilePath))
            throw new Exception(String.Format("нет файла даилога ! \nпуть: {0}", _tempoDlxFilePath));

        theDialog = theUI.CreateDialog(_tempoDlxFilePath);
        theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
        theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
        theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
        theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
        //theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
        theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
        theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
        theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
        theDialog.AddEnableOKButtonHandler(new NXOpen.BlockStyler.BlockDialog.EnableOKButton(enableOKButton_cb));

     //   foreach (var tree in _tree_control0List)
     //   {
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
      //  }

    }

    public string TheDlxFileName
    {
        get { return theDlxFileName; }
    }

    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Remove the following conditional definitions:
    //                a) #if USER_EXIT_OR_MENU
    //                    #endif//USER_EXIT_OR_MENU
    //
    //                b) #if USER_EXIT
    //                    #endif//USER_EXIT
    //        2) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        3) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //    3. THROUGH CALLBACK OF ANOTHER DIALOG
    //
    //        1) Remove the following conditional definition:
    //             #if CALLBACK
    //             #endif//CALLBACK
    //        2) Call the following line of code from where ever you want to lauch this dialog.
    //             ToolHolderDialog.Show_secondDialog();
    //        3) Integrate this file with your main application file.
    //
    //    4. MENU BAR
    //    
    //        1) Remove the following conditional definition:
    //                a) #if USER_EXIT_OR_MENU
    //                   #endif//USER_EXIT_OR_MENU
    //        2) Add the following lines to your MenuScript file in order to
    //           associate a menu bar button with your dialog.  In this
    //           example, a cascade menu will be created and will be
    //           located just before the Help button on the main menubar.
    //           The button, SAMPLEVB_BTN is set up to launch your dialog and
    //           will be positioned as the first button on your pulldown menu.
    //           If you wish to add the button to an existing cascade, simply
    //           add the 3 lines between MENU LAUNCH_CASCADE and END_OF_MENU
    //           to your menuscript file.
    //           The MenuScript file requires an extension of ".men".
    //           Move the contents between the dashed lines to your Menuscript file.
    //        
    //           !-----------------------------------------------------------------------------
    //           VERSION 120
    //        
    //           EDIT UG_GATEWAY_MAIN_MENUBAR
    //        
    //           BEFORE UG_HELP
    //           CASCADE_BUTTON BLOCKSTYLER_DLX_CASCADE_BTN
    //           LABEL Dialog Launcher
    //           END_OF_BEFORE
    //        
    //           MENU BLOCKSTYLER_DLX_CASCADE_BTN
    //           BUTTON SAMPLEVB_BTN
    //           LABEL Display SampleVB dialog
    //           ACTIONS <path of Shared library> !For example: D:\temp\SampleVB.dll
    //           END_OF_MENU
    //           !-----------------------------------------------------------------------------
    //        
    //        3) Make sure the .men file is in one of the following locations:
    //        
    //           - $UGII_USER_DIR/startup   
    //           - For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //             recommended. This variable is set to a full directory path to a file 
    //             containing a list of root directories for all custom applications.
    //             e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    //    
    //------------------------------------------------------------------------------
//#if USER_EXIT_OR_MENU
    public static void Main()
    {
        ToolHolderDialog toolHolderDialog = null;
        try
        {             
            toolHolderDialog = new ToolHolderDialog();
			toolHolderDialog._dataService = new DataService(toolHolderDialog);
           


			// The following method shows the dialog immediately            
            toolHolderDialog.Show();
           
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(toolHolderDialog != null)
                toolHolderDialog.Dispose();
                toolHolderDialog = null;
        }
    }


//#endif//USER_EXIT_OR_MENU
#if USER_EXIT
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
#endif//USER_EXIT
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            DeleteTempoDLXFile();
            theDialog.Dispose();
            theDialog = null;
        }
    }


#if CALLBACK
    //------------------------------------------------------------------------------
    //Method name: Show_secondDialog
    //------------------------------------------------------------------------------
    public static void Show_secondDialog()
    {
        ToolHolderDialog thesecondDialog = null;
        try
        {
            thesecondDialog = new ToolHolderDialog();
            // The following method shows the dialog immediately
            thesecondDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            thesecondDialog.Dispose();
            thesecondDialog = null;
        }
    }
#endif//CALLBACK
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {

        string[] arr = _dataService.XMLService.NameArrays;
        int toolQnt = _dataService.Data.ToolArray.Length;
        thNXTool[] tools = _dataService.Data.ToolArray;
        initArraysOfVariable(toolQnt);

        try
        {
            label0 = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("label0");
            explorer = (NXOpen.BlockStyler.Explorer)theDialog.TopBlock.FindBlock("explorer");

            //"explorerNode",
            //"stringLabelTool",
            //"doubleToolDiam",
            //"separator011",
            //"offsetOfTool",
            //"separator02",
            //"multiline_string01",
            //"separator03",
            //"stringLabelHolder",
            //"separator04",
            //"stringLibRef1",
            //"separator05",
            //"multiline_string0",
            //"separator06",
            //"tree_control0",

            for (int i = 0; i < toolQnt; i++)
            {
                    string app = i.ToString();
                    if (i == 0)
                        app = String.Empty;
                    _explorerNodeList[i] = (NXOpen.BlockStyler.Group) theDialog.TopBlock.FindBlock(arr[0] + app);
                    _explorerNodeList[i].Label = String.Format("T{0} - {1}",  tools[i].ToolNumber, tools[i].Tool.Name);
                    _stringLabelToolList[i] = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock(arr[1] + app);
                    _doubleToolDiamList[i] =   (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock(arr[2] + app);
                    _separator011List[i] = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock(arr[3] + app);
                    _offsetOfToolList[i] = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock(arr[4] + app);
                    _separator02List[i] = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock(arr[5] + app);
                    _multiline_string01List[i] = (NXOpen.BlockStyler.MultilineString)theDialog.TopBlock.FindBlock(arr[6] + app);
                    _separator03List[i] = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock(arr[7] + app);
                    _stringLabelHolderList[i] = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock(arr[8] + app);
                    _separator04List[i] = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock(arr[9] + app);
                    _stringLibRef1List[i] = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock(arr[10] + app);
                    _separator05List[i] = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock(arr[11] + app);
                    _multiline_string0List[i] = (NXOpen.BlockStyler.MultilineString)theDialog.TopBlock.FindBlock(arr[12] + app);
                    _separator06List[i] = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock(arr[13] + app);
                    _tree_control0List[i] = (NXOpen.BlockStyler.Tree)theDialog.TopBlock.FindBlock(arr[14] + app);
            


            //explorerNode = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("explorerNode");
            //stringLabelTool = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("stringLabelTool");
            //doubleToolDiam = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("doubleToolDiam");
            //separator011 = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock("separator011");
            //offsetOfTool = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("offsetOfTool");
            //separator02 = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock("separator02");
            //multiline_string01 = (NXOpen.BlockStyler.MultilineString)theDialog.TopBlock.FindBlock("multiline_string01");
            //separator03 = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock("separator03");
            //stringLabelHolder = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("stringLabelHolder");
            //separator04 = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock("separator04");
            //stringLibRef1 = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("stringLibRef1");
            //separator05 = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock("separator05");
            //multiline_string0 = (NXOpen.BlockStyler.MultilineString)theDialog.TopBlock.FindBlock("multiline_string0");
            //separator06 = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock("separator06");
            //tree_control0 = (NXOpen.BlockStyler.Tree)theDialog.TopBlock.FindBlock("tree_control0");


            //------------------------------------------------------------------------------
            //Registration of Treelist specific callbacks
            //------------------------------------------------------------------------------
            //tree_control0.SetOnExpandHandler(new NXOpen.BlockStyler.Tree.OnExpandCallback(OnExpandCallback));
            
            //tree_control0.SetOnInsertColumnHandler(new NXOpen.BlockStyler.Tree.OnInsertColumnCallback(OnInsertColumnCallback));
            
            //tree_control0.SetOnInsertNodeHandler(new NXOpen.BlockStyler.Tree.OnInsertNodeCallback(OnInsertNodecallback));
            
            //tree_control0.SetOnDeleteNodeHandler(new NXOpen.BlockStyler.Tree.OnDeleteNodeCallback(OnDeleteNodecallback));
            
            //tree_control0.SetOnPreSelectHandler(new NXOpen.BlockStyler.Tree.OnPreSelectCallback(OnPreSelectcallback));

             _tree_control0List[i].SetOnSelectHandler(new NXOpen.BlockStyler.Tree.OnSelectCallback(OnSelectcallback));
//           tree_control0.SetOnSelectHandler(new NXOpen.BlockStyler.Tree.OnSelectCallback(OnSelectcallback));
            
            //tree_control0.SetOnStateChangeHandler(new NXOpen.BlockStyler.Tree.OnStateChangeCallback(OnStateChangecallback));
            
            //tree_control0.SetToolTipTextHandler(new NXOpen.BlockStyler.Tree.ToolTipTextCallback(ToolTipTextcallback));
            
            //tree_control0.SetColumnSortHandler(new NXOpen.BlockStyler.Tree.ColumnSortCallback(ColumnSortcallback));
            
            //tree_control0.SetStateIconNameHandler(new NXOpen.BlockStyler.Tree.StateIconNameCallback(StateIconNameCallback));
            
            //tree_control0.SetOnBeginLabelEditHandler(new NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback(OnBeginLabelEditCallback));
            
            //tree_control0.SetOnEndLabelEditHandler(new NXOpen.BlockStyler.Tree.OnEndLabelEditCallback(OnEndLabelEditCallback));
            
            //tree_control0.SetOnEditOptionSelectedHandler(new NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback(OnEditOptionSelectedCallback));
            
            //tree_control0.SetAskEditControlHandler(new NXOpen.BlockStyler.Tree.AskEditControlCallback(AskEditControlCallback));
            
            //tree_control0.SetOnMenuHandler(new NXOpen.BlockStyler.Tree.OnMenuCallback(OnMenuCallback));;
            
            //tree_control0.SetOnMenuSelectionHandler(new NXOpen.BlockStyler.Tree.OnMenuSelectionCallback(OnMenuSelectionCallback));;
            
            //tree_control0.SetIsDropAllowedHandler(new NXOpen.BlockStyler.Tree.IsDropAllowedCallback(IsDropAllowedCallback));;
            
            //tree_control0.SetIsDragAllowedHandler(new NXOpen.BlockStyler.Tree.IsDragAllowedCallback(IsDragAllowedCallback));;
            
            //tree_control0.SetOnDropHandler(new NXOpen.BlockStyler.Tree.OnDropCallback(OnDropCallback));;
            
            //tree_control0.SetOnDropMenuHandler(new NXOpen.BlockStyler.Tree.OnDropMenuCallback(OnDropMenuCallback));
            
            _tree_control0List[i].SetOnDefaultActionHandler(new NXOpen.BlockStyler.Tree.OnDefaultActionCallback(OnDefaultActionCallback));

            }
            //------------------------------------------------------------------------------
            //------------------------------------------------------------------------------
            //Registration of StringBlock specific callbacks
            //------------------------------------------------------------------------------
            //stringLibRef1.SetKeystrokeCallback(new NXOpen.BlockStyler.StringBlock.KeystrokeCallback(KeystrokeCallback));
            
            //------------------------------------------------------------------------------
            //------------------------------------------------------------------------------
            //Registration of Explorer, explorer specific callbacks
            //------------------------------------------------------------------------------
            //explorer.SetNotifyNodeSelectedPreHandler(new NXOpen.BlockStyler.Explorer.NotifyNodeSelectedPreCallback(notifyNodeSelectedPreCallback));
            
            //explorer.SetNotifyNodeSelectedPostHandler(new NXOpen.BlockStyler.Explorer.NotifyNodeSelectedPostCallback(notifyNodeSelectedPostCallback));




            //---------------------------------

           // CreateAndAddNode("Test");   

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    private void initArraysOfVariable(int size)
    {
        for (int i = 0; i < size; i++)
        {
            _explorerNodeList.Add(new Object() as Group);
            _stringLabelToolList.Add(new Object() as Label);
            _doubleToolDiamList.Add(new Object() as DoubleBlock);
            _separator011List.Add(new Object() as Separator);
            _offsetOfToolList.Add(new Object() as IntegerBlock);
            _separator02List.Add(new Object() as Separator);
            _multiline_string01List.Add(new Object() as MultilineString);
            _separator03List.Add(new Object() as Separator);
            _stringLabelHolderList.Add(new Object() as Label);
            _separator04List.Add(new Object() as Separator);
            _stringLibRef1List.Add(new Object() as StringBlock);
            _separator05List.Add(new Object() as Separator);
            _multiline_string0List.Add(new Object() as MultilineString);
            _separator06List.Add(new Object() as Separator);
            _tree_control0List.Add(new Object() as Tree);
        }
    }
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        //GetSelectedObjects();

        int index = explorer.CurrentNode;
        Tree currenTree = _tree_control0List[index];
        currentTool = _dataService.Data.ToolArray[index];

        if (currentTool.PossibleChoice.Length == 0 || currentTool.PossibleChoice == null)
            return;

        try
        {
            //Добавляем колонки

            //Node firstN =  currenTree.RootNode;
            //if (firstN != null)
            //   text = firstN.DisplayText;

            //foreach (Tree tree in _tree_control0List)
            //{
            currenTree.InsertColumn((int)Columns.Name, "название", 200);
            currenTree.InsertColumn((int)Columns.Type, "тип", 40);
            currenTree.InsertColumn((int)Columns.Length, "длина, мм", 60);
            currenTree.InsertColumn((int)Columns.SpindelMount, "шпиндель", 60);
            currenTree.InsertColumn((int)Columns.Descr, "описание", 150);


            currenTree.SetColumnResizePolicy((int)Columns.Name, Tree.ColumnResizePolicy.ResizeWithContents);
            currenTree.SetColumnResizePolicy((int)Columns.Type, Tree.ColumnResizePolicy.ResizeWithContents);
            currenTree.SetColumnResizePolicy((int)Columns.Length, Tree.ColumnResizePolicy.ResizeWithContents);
            currenTree.SetColumnResizePolicy((int)Columns.SpindelMount, Tree.ColumnResizePolicy.ResizeWithContents);
            currenTree.SetColumnResizePolicy((int)Columns.Descr, Tree.ColumnResizePolicy.ResizeWithContents);


            CreateAndAddNode(currentTool, currenTree);
            //}

            //tree_control0.InsertColumn((int) Columns.Name, "название", 200);
            //tree_control0.InsertColumn((int) Columns.Type, "тип", 40);
            //tree_control0.InsertColumn((int)Columns.Length, "длина, мм", 60);
            //tree_control0.InsertColumn((int)Columns.SpindelMount, "крепеление", 60);

            //tree_control0.SetColumnResizePolicy((int) Columns.Name,Tree.ColumnResizePolicy.ConstantWidth);
            //tree_control0.SetColumnResizePolicy((int) Columns.Type,Tree.ColumnResizePolicy.ConstantWidth);
            //tree_control0.SetColumnResizePolicy((int)Columns.Length, Tree.ColumnResizePolicy.ConstantWidth);
            //tree_control0.SetColumnResizePolicy((int)Columns.SpindelMount, Tree.ColumnResizePolicy.ConstantWidth);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }



    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == label0)
            {
            //---------Enter your code here-----------
            }
            else if(block == stringLabelTool)
            {
            //---------Enter your code here-----------
            }
            else if (block == doubleToolDiam)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator011)
            {
            //---------Enter your code here-----------
            }
            else if(block == offsetOfTool)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator02)
            {
            //---------Enter your code here-----------
            }
            else if(block == multiline_string01)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator03)
            {
            //---------Enter your code here-----------
            }
            else if(block == stringLabelHolder)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator04)
            {
            //---------Enter your code here-----------
            }
            else if(block == stringLibRef1)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator05)
            {
            //---------Enter your code here-----------
            }
            else if(block == multiline_string0)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator06)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    public int cancel_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: filter_cb
    //------------------------------------------------------------------------------
    public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
    {
        return(NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: enableOKButton_cb
    //This callback allows the dialog to enable/disable the OK and Apply button.
    //------------------------------------------------------------------------------
    public bool enableOKButton_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return true;
    }
    //------------------------------------------------------------------------------
    //Treelist specific callbacks
    //------------------------------------------------------------------------------
    //public void OnExpandCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node)
    //{
    //}
    
   public void OnInsertColumnCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
    {

    }
    
    //public void OnInsertNodecallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node)
    //{
    //}
    
    //public void OnDeleteNodecallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node)
    //{
    //}
    
    //public void OnPreSelectcallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, bool Selected)
    //{
    //}
    
    public void OnSelectcallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, bool Selected)
    {



    }
    
    //public void OnStateChangecallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int State)
    //{
    //}
    
    //public string ToolTipTextcallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
    //{
    //}
    
    //public int ColumnSortcallback(NXOpen.BlockStyler.Tree tree, int columnID, NXOpen.BlockStyler.Node node1, NXOpen.BlockStyler.Node node2)
    //{
    //}
    
    //public string StateIconNameCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int state)
    //{
    //}
    
    //public Tree.BeginLabelEditState OnBeginLabelEditCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
    //{
    //}
    
    //public Tree.EndLabelEditState OnEndLabelEditCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, string editedText)
    //{
    //}
    
    //public Tree.EditControlOption OnEditOptionSelectedCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, int selectedOptionID, string selectedOptionText, Tree.ControlType type)
    //{
    //}
    
    //public Tree.ControlType AskEditControlCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
    //{
    //}
    
    //public void OnMenuCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
    //{
    //}
    
    //public void OnMenuSelectionCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int menuItemID)
    //{
    //}
    
    //public Node.DropType IsDropAllowedCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, NXOpen.BlockStyler.Node targetNode, int targetColumnID)
    //{
    //}
    
    //public Node.DragType IsDragAllowedCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
    //{
    //}
    
    //public bool OnDropCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node[] node, int columnID, NXOpen.BlockStyler.Node targetNode, int targetColumnID, Node.DropType dropType, int dropMenuItemId)
    //{
    //}
    
    //public void OnDropMenuCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, NXOpen.BlockStyler.Node targetNode, int targetColumnID)
    //{
    //}
    
    public void OnDefaultActionCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
    {// TODO реализовать метод вызываемый двойным шечком

        var x = currentTool;
    }
    
    //------------------------------------------------------------------------------
    //StringBlock specific callbacks
    //------------------------------------------------------------------------------
    //public int KeystrokeCallback(NXOpen.BlockStyler.StringBlock string_block, string uncommitted_value)
    //{
    //}
    
    //------------------------------------------------------------------------------
    //public int  notifyNodeSelectedPreCallback(NXOpen.BlockStyler.Explorer explorer, int nextNode)
    //{
    //}
    
    //public void notifyNodeSelectedPostCallback(NXOpen.BlockStyler.Explorer explorer, int nextNode)
    //{
    //}
    
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }

    public enum Columns  
    {
        Name = 0, 
        Type = 1, 
        Length = 2,
        SpindelMount = 3,
        Descr = 4
    }

    //public void SetVisibleNodes(int num)
    //{

    //    _num = num;
    //}



    private void CreateAndAddNode(thNXTool nxTool, Tree tree)
    {
        var x = cnt;
        Node parentNode = null;

     

        foreach (var holder in nxTool.PossibleChoice)
        {
        Node node = tree.CreateNode(holder.HolderLibraryReference);
        //настройки ноды
        //"turn_holder_hand_left" левый держатель
        //"turn_holder_hand_neutral" нейтральный держатель
        //"turn_holder_round" круглый держатель
        // "snowflake" ???
        // "sm_solid_punch_pierce_face" объёмная буква Т
        // "sm_solid_punch_tool" желтая объёмная буква Т
        // "cleanup" иконка метлы
        // "clock" часы
        // "hole_drill_size" сверло
        // "hole_tapered" конус похож на термооправку
        // "bc_pinned" - иконка похожа на цангу
        //"cclw" "clw" "od_55_l" "od_80_l" иконка токарного резца

        node.ForegroundColor = 201;//198
        node.DisplayIcon = "sm_solid_punch_pierce_face";   //"extrude", "cone", "block", "blend"
        node.SelectedIcon = "sm_solid_punch_tool";
        
        //вставляем ноды в дерево
        

        tree.InsertNode(node, parentNode, null, Tree.NodeInsertOption.Sort);

        string type = holder.HolderSubType == thNXToolHolder.HolderType.Collet ? holder.ColletSize.ToString() : holder.HolderSubType.ToString();

        node.SetColumnDisplayText((int) Columns.Type, type);
        node.SetColumnDisplayText((int)Columns.Length, holder.Length.ToString());
        node.SetColumnDisplayText((int)Columns.SpindelMount, holder.HolderSpindelMount.ToString());
        node.SetColumnDisplayText((int)Columns.Descr, holder.Description);


         node.ScrollTo((int) Columns.Name, Node.Scroll.Center);
         cnt++;
        }
    }

    public void SetTempoDlxFile(string tempoDlxFilePath)
    {
        _tempoDlxFilePath = tempoDlxFilePath;
    }


    private void DeleteTempoDLXFile()
    {
       // throw new NotImplementedException();
    }


    public void GetSelectedObjects()
    {
        // Переключимся в режим выбора программ
        // тэги выделенных объектов переносим в List 
        try
        {
           int x =  explorer.CurrentNode;

            thNXSession.Ufs.Cam.InitSession();

            //Ufs.UiOnt.SwitchView(UFUiOnt.TreeMode.Order); // переключаем вид на навигатор операций.

           // Tag tag;
           // thNXSession._ufs.Draw.AskCurrentDrawing(out tag);

            // Get the selected nodes from the Operation Navigator
            int selectedCount;
            Tag[] selectedTags;
            if (thNXSession.Ufs == null) return;

           // thNXSession._ufs.Ui.AskSelObjectList(IntPtr.Zero, out selectedCount, out selectedTags);
            
            thNXSession.Ufs.UiOnt.AskSelectedNodes(out selectedCount, out selectedTags);
             var taggedObjects = selectedTags.Select(NXObjectManager.Get).ToList();
             var objects = taggedObjects.Where(obj => obj is NXOpen.BlockStyler.Group ).ToList();
            // TaggedObjects = objects;
        }
        catch (Exception e)
        {
            UI.GetUI()
                .NXMessageBox.Show("Нет выбраных обектов UI", NXMessageBox.DialogType.Error,
                    "Для работы программы вы должны выбрать UI элемент NXOpen.BlockStyler.Group !");
        }
    }


}
